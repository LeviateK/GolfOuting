@page "/teamplayers"
@using GolfOuting.Models
@using GolfOuting.Services
@inject IGolfOutingService GolfOutingService
<h2>Team Players</h2>
<hr />
@if (teamPlayers == null)
{
    <div class="progress" style="height: 40px;">
        <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 100%; background-color:#393939; color:white">Loading Players...</div>
    </div>
}
else
{
<div class="container-fluid">
    <div>
        <input type="button" data-toggle="modal" data-target="#teamPlayerDetailsModal" class="btn btn-light badge-pill rounded-pill" value="Add New" @onclick="(() => InitializeTeamPlayerObject())" />
    </div>
    <table id="example" class="table table-striped table-responsive">
        <thead class="thead-dark">
            <tr>
                <th>Team Name</th>
                <th>Player Name</th>
                <th>Edit</th>
            </tr>
        </thead>
        <tbody>
            @foreach (TeamPlayer teamPlayer in teamPlayers)
            {
                <tr>
                    <td>@teamPlayer.Team.TeamName</td>
                    <td>@teamPlayer.Player.DisplayName</td>

                    <td><input type="button" class="btn btn-outline-dark badge-pill rounded-pill" @onclick="(() => PrepareForEdit(teamPlayer))" data-toggle="modal" data-target="#teamPlayerDetailsModal" value="Edit" /></td>
                </tr>
            }
        </tbody>
    </table>
    <div>
        <input type="button" data-toggle="modal" data-target="#teamPlayerDetailsModal" class="btn btn-light badge-pill rounded-pill" value="Add New" @onclick="(() => InitializeTeamPlayerObject())" />
    </div>
    <TeamPlayerDetails TeamPlayer="teamPlayer" Teams="teams" Players="players" DataChanged="@DataChanged">
        <CustomHeader>@customHeader</CustomHeader>
    </TeamPlayerDetails>
</div>
}



@code {

    List<TeamPlayer> teamPlayers;
    List<Team> teams;
    List<Player> players;
    TeamPlayer teamPlayer = new TeamPlayer();
    string customHeader = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        teamPlayers = await GolfOutingService.GetTeamPlayersAsync();
        teams = await GolfOutingService.GetTeamsAsync();
        players = await GolfOutingService.GetPlayersAsync();

    }

    private void InitializeTeamPlayerObject()
    {
        teamPlayer = new TeamPlayer();
        customHeader = "Add New Team Player";
        //taskObject.DueDate = DateTime.Now;

    }

    private async void DataChanged()
    {
        teamPlayers = await GolfOutingService.GetTeamPlayersAsync();
        StateHasChanged();
    }

    private void PrepareForEdit(TeamPlayer tp)
    {
        customHeader = string.Format("Edit {0} / {1}", tp.Team.TeamName, tp.Player.DisplayName);
        teamPlayer = tp;
    }

    private void PrepareForDelete(TeamPlayer tp)
    {
        teamPlayer = tp;
    }
}
