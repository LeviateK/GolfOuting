@page "/courses"
@using GolfOuting.Models
@using GolfOuting.Services
@inject IGolfOutingService GolfOutingService
<h2>Courses</h2>
<hr />
@if (courses == null)
{
    <div class="progress" style="height: 40px;">
        <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 100%; background-color:#393939; color:white">Loading Players...</div>
    </div>
}
else
{
    <div class="container-fluid">
        <table id="example" class="table table-striped table-responsive">
            <thead class="thead-dark">
                <tr>
                    <th>Course Name</th>
                    <th># of Holes</th>
                    <th>Edit</th>
                </tr>
            </thead>
            <tbody>
                @foreach (Course course in courses)
                {
                    <tr>
                        <td>@course.CourseName</td>
                        <td>@course.Holes.Count()</td>
                        
                        <td><input type="button" class="btn btn-outline-dark badge-pill rounded-pill" @onclick="(() => PrepareForEdit(course))" data-toggle="modal" data-target="#courseModal" value="Edit" /></td>
                    </tr>
                }
            </tbody>
        </table>
        <div>
            <input type="button" data-toggle="modal" data-target="#courseModal" class="btn btn-light badge-pill rounded-pill" value="Add New" @onclick="(() => InitializeCourseObject())" />
        </div>
        @*<OutingDetails Outing="outing" DataChanged="@DataChanged">
                <CustomHeader>@customHeader</CustomHeader>
            </OutingDetails>*@
    </div>
}



@code {

    List<Course> courses;
    Course course = new Course();
    string customHeader = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        courses = await GolfOutingService.GetCoursesAsync();

    }

    private void InitializeCourseObject()
    {
        course = new Course();
        customHeader = "Add New Course";
        //taskObject.DueDate = DateTime.Now;

    }

    private async void DataChanged()
    {
        courses = await GolfOutingService.GetCoursesAsync();
        StateHasChanged();
    }

    private void PrepareForEdit(Course c)
    {
        customHeader = string.Format("Edit {0}", c.CourseName);
        course = c;
    }

    private void PrepareForDelete(Course c)
    {
        course = c;
    }
}
