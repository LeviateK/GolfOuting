@page "/outingteams"
@using GolfOuting.Models
@using GolfOuting.Services
@inject IGolfOutingService GolfOutingService
<h2>Outing Teams</h2>
<hr />
@if (outingTeams == null)
{
    <div class="progress" style="height: 40px;">
        <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 100%; background-color:#393939; color:white">Loading Players...</div>
    </div>
}
else
{
    <div class="container-fluid">
        <table id="example" class="table table-striped table-responsive">
            <thead class="thead-dark">
                <tr>
                    <th>Year</th>
                    <th>Outing</th>
                    <th>Team</th>
                    <th>Edit</th>
                </tr>
            </thead>
            <tbody>
                @foreach (OutingTeam outingTeam in outingTeams.OrderByDescending(o => o.Outing.Year.YearValue))
                {
                    <tr>
                        <td>@outingTeam.Outing.Year.YearValue</td>
                        <td>@outingTeam.Outing.OutingName</td>
                        <td>@outingTeam.Team.TeamName</td>
                        <td><input type="button" class="btn btn-outline-dark badge-pill rounded-pill" @onclick="(() => PrepareForEdit(outingTeam))" data-toggle="modal" data-target="#outingTeamDetailsModal" value="Edit" /></td>
                    </tr>
                }
            </tbody>
        </table>
        <div>
            <input type="button" data-toggle="modal" data-target="#outingTeamDetailsModal" class="btn btn-light badge-pill rounded-pill" value="Add New" @onclick="(() => InitializeOutingTeamObject())" />
        </div>
        <OutingTeamDetails OutingTeam="outingTeam" Teams="teams" Outings="outings" DataChanged="@DataChanged">
            <CustomHeader>@customHeader</CustomHeader>
        </OutingTeamDetails>
    </div>
}



@code {

    List<OutingTeam> outingTeams;
    List<Team> teams;
    List<Outing> outings;
    OutingTeam outingTeam = new OutingTeam();
    string customHeader = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        outingTeams = await GolfOutingService.GetOutingTeamsAsync();
        teams = await GolfOutingService.GetTeamsAsync();
        outings = await GolfOutingService.GetOutingsAsync();

    }

    private void InitializeOutingTeamObject()
    {
        outingTeam = new OutingTeam();
        customHeader = "Add New Outing Team";
        //taskObject.DueDate = DateTime.Now;

    }

    private async void DataChanged()
    {
        outingTeams = await GolfOutingService.GetOutingTeamsAsync();
        StateHasChanged();
    }

    private void PrepareForEdit(OutingTeam ot)
    {
        customHeader = string.Format("Edit {0} / {1}", ot.Outing.Year.YearValue, ot.Team.TeamName);
        outingTeam = ot;
    }

    private void PrepareForDelete(OutingTeam ot)
    {
        outingTeam = ot;
    }
}
