@using GolfOuting.Models
@using GolfOuting.Services
@using GolfOuting.Util
@inject IJSRuntime jsRuntime
@inject IGolfOutingService GolfOutingService
<div class="modal" tabindex="-1" role="dialog" id="teamPlayerDetailsModal">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@CustomHeader</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@TeamPlayer" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="taskName">Team</label>
                        <input type="hidden" @bind-value="@TeamPlayer.TeamPlayerID" />
                        <InputSelectNumber id="name" class="form-control" @bind-Value="@TeamPlayer.TeamID">
                            @foreach (var t in Teams)
                            { 
                            <option value="@t.TeamID">@t.TeamName</option>
                            }
                        </InputSelectNumber>
                        <ValidationMessage For="@(() => TeamPlayer.TeamID)" />
                    </div>
                    <div class="form-group">
                        <label for="taskName">Player</label>
                        <InputSelectNumber id="name" class="form-control" @bind-Value="@TeamPlayer.PlayerID">
                            @foreach (var p in Players)
                            {
                                <option value="@p.PlayerID">@p.DisplayName</option>
                            }
                        </InputSelectNumber>
                        <ValidationMessage For="@(() => TeamPlayer.TeamID)" />
                    </div>
                    <button type="submit" class="btn btn-dark">Submit</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public TeamPlayer TeamPlayer { get; set; }

    [Parameter]
    public List<Team> Teams { get; set; }

    [Parameter]
    public List<Player> Players { get; set; }

    [Parameter]
    public System.Action DataChanged { get; set; }

    [Parameter]
    public RenderFragment CustomHeader { get; set; }

    // List<string> TaskStatusList = new List<string>() { "New", "In Progress", "Completed" };

    private async Task CloseTaskModal()
    {
        await jsRuntime.InvokeAsync<object>("CloseModal", "teamPlayerDetailsModal");
    }

    private async void HandleValidSubmit()
    {
        // var authState = await AuthenticationStateTask;
        // UserName = authState.User.Identity.Name;
        if (TeamPlayer.TeamPlayerID == 0)
        {
            await GolfOutingService.AddAsync(TeamPlayer);
        }
        else
        {
            await GolfOutingService.UpdateAsync(TeamPlayer);

        }
        await CloseTaskModal();
        DataChanged?.Invoke();

    }
}