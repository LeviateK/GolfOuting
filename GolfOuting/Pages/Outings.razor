@page "/outings"
@using GolfOuting.Models
@using GolfOuting.Services
@inject IGolfOutingService GolfOutingService
<h2>Outings</h2>
<hr />
@if (outings == null)
{
    <div class="progress" style="height: 40px;">
        <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 100%; background-color:#393939; color:white">Loading Players...</div>
    </div>
}
else
{
    <div class="container-fluid">
        <table id="example" class="table table-striped table-responsive">
            <thead class="thead-dark">
                <tr>
                    <th>Year</th>
                    <th>Outing Name</th>
                    <th>Course</th>
                    <th>Teams</th>
                    <th>Edit</th>
                </tr>
            </thead>
            <tbody>
                @foreach (Outing outing in outings)
                {
                <tr>
                    <td>@outing.Year.YearValue</td>
                    <td>@outing.OutingName</td>
                    <td>@outing.Course.CourseName</td>
                    <td>
                        @foreach (OutingTeam outingTeam in outing.OutingTeams.OrderBy(o=>o.Team.PairingOrder))
                        {
                            int c = 0;
                            @if (c % 2 == 0)
                            {
                                <div class="alert alert-dark">
                                    <div class="badge badge-dark">@outingTeam.Team.TeamName</div>
                                    <span class="badge badge-pill badge-secondary">Pairing Order: @outingTeam.Team.PairingOrder</span>
                                    <ul>
                                        @foreach (TeamPlayer teamPlayer in outingTeam.Team.TeamPlayers.OrderBy(p=>p.Player.LastName))
                                        {
                                            <li>@teamPlayer.Player.DisplayName</li>
                                        }
                                    </ul>
                                    @if(outingTeam.Team.Mulligans)
                                    {
                                         <div class=" badge badge-pill badge-warning">Mulligans</div>
                                    }
                                     @if(outingTeam.Team.Skins)
                                    {
                                         <div class=" badge badge-pill badge-success">Skins</div>
                                    }

                                </div>
                            }
                            else
                            {
                                <div class="alert alert-warning">@outingTeam.Team.TeamName</div>
                            }
                            c++;
                            
                        }

                    </td>
                    <td><input type="button" class="btn btn-outline-dark badge-pill rounded-pill" @onclick="(() => PrepareForEdit(outing))" data-toggle="modal" data-target="#outingModal" value="Edit" /></td>
                </tr>
                }
            </tbody>
        </table>
        <div>
            <input type="button" data-toggle="modal" data-target="#outingModal" class="btn btn-light badge-pill rounded-pill" value="Add New" @onclick="(() => InitializeOutingObject())" />
        </div>
        @*<OutingDetails Outing="outing" DataChanged="@DataChanged">
            <CustomHeader>@customHeader</CustomHeader>
        </OutingDetails>*@
    </div>
}



@code {

    List<Outing> outings;
    Outing outing = new Outing();
    string customHeader = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        outings = await GolfOutingService.GetOutingsAsync();

    }

    private void InitializeOutingObject()
    {
        outing = new Outing();
        customHeader = "Add New Outing";
        //taskObject.DueDate = DateTime.Now;

    }

    private async void DataChanged()
    {
        outings = await GolfOutingService.GetOutingsAsync();
        StateHasChanged();
    }

    private void PrepareForEdit(Outing o)
    {
        customHeader = string.Format("Edit {0}", o.OutingName);
        outing = o;
    }

    private void PrepareForDelete(Outing o)
    {
        outing = o;
    }
}
