@page "/scorecard/{otid}"
@using GolfOuting.Models
@using GolfOuting.Services
@inject IGolfOutingService GolfOutingService
<h2>@scorecardHeader</h2>
<hr />
@if (holeScores == null)
{
    <div class="progress" style="height: 40px;">
        <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 100%; background-color:#393939; color:white">Loading...</div>
    </div>
}
else
{
    <div class="container-fluid">
        <table id="example" class="table table-striped table-responsive">
            <thead class="thead-dark">
                <tr>
                    <th>Hole</th>
                    @foreach (HoleScore holeScore1 in holeScores)
                    { 
                        <th>@holeScore1.Hole.HoleNumber</th>
                    }
                    <th>Total</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Par</td>
                    @foreach (HoleScore holeScore in holeScores)
                    {
                        <td>@holeScore.Hole.Par</td>
                    }
                    <td>@holeScores.Sum(h=>h.Hole.Par)</td>
                    </tr>
                <tr>
                    <td>Score</td>
                    @foreach (HoleScore holeScore in holeScores)
                    {
                        if (holeScore.Score == holeScore.Hole.Par) // Par
                        {
                            <td><input type="button" class="btn btn-outline-dark badge-pill rounded-pill" @onclick="(() => PrepareForEdit(holeScore))" data-toggle="modal" data-target="#holeScoreModal" value="@holeScore.Score" /></td>
                        }
                        else if (holeScore.Score < holeScore.Hole.Par) // Under Par
                        {
                            <td><input type="button" class="btn btn-danger badge-pill rounded-pill" @onclick="(() => PrepareForEdit(holeScore))" data-toggle="modal" data-target="#holeScoreModal" value="@holeScore.Score" /></td>
                        }
                        else // Over Par
                        {
                            <td><input type="button" class="btn btn-dark badge-pill rounded-pill" @onclick="(() => PrepareForEdit(holeScore))" data-toggle="modal" data-target="#holeScoreModal" value="@holeScore.Score" /></td>
                        }

                    }
                    @if (holeScores.Sum(h => h.Score) == holeScores.Sum(h=>h.Hole.Par))
                    {
                        <td>@holeScores.Sum(h => h.Score)</td>
                    }
                    else if (holeScores.Sum(h => h.Score) < holeScores.Sum(h=>h.Hole.Par))
                    {
                        <td class="bg-danger text-white">@holeScores.Sum(h => h.Score)</td>
                    }
                    else
                    {
                        <td class="bg-dark text-white">@holeScores.Sum(h => h.Score)</td>
                    }


                    
                </tr>
            </tbody>
        </table>
        <HoleScoreDetails HoleScore="holeScore" DataChanged="@DataChanged">
                <CustomHeader>@customHeader</CustomHeader>
            </HoleScoreDetails>
    </div>
}



@code {

    List<HoleScore> holeScores;
    HoleScore holeScore = new HoleScore();
    string customHeader = string.Empty;
    string scorecardHeader { get; set; }
    string totalCSS { get; set; }

    [Parameter]
    public string otid { get; set; }

    protected override async Task OnInitializedAsync()
    {
        holeScores = await GolfOutingService.GetHoleScoresAsync(Convert.ToInt32(otid));
        scorecardHeader = string.Format("Scorecard : {0} {1} @ {2} - {3}", holeScores.FirstOrDefault().OutingTeam.Outing.Year.YearValue, holeScores.FirstOrDefault().OutingTeam.Outing.OutingName, holeScores.FirstOrDefault().Hole.Course.CourseName, holeScores.FirstOrDefault().OutingTeam.Team.TeamName);
        int roundScore = holeScores.Sum(h => h.Score);
        
    }

    private void InitializeOutingObject()
    {
        holeScore = new HoleScore();
        customHeader = "Add New Hole Score";
        //taskObject.DueDate = DateTime.Now;

    }

    private async void DataChanged()
    {
        holeScores = await GolfOutingService.GetHoleScoresAsync(Convert.ToInt32(otid));
        StateHasChanged();
    }

    private void PrepareForEdit(HoleScore hs)
    {
        customHeader = string.Format("{0} : Edit Hole {1}", hs.OutingTeam.Team.TeamName, hs.Hole.HoleNumber.ToString());
        holeScore = hs;
    }

    private void PrepareForDelete(HoleScore hs)
    {
        holeScore = hs;
    }
}

